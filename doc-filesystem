#######################################################################
#
# Filesystem Format
#
#######################################################################

The goal of this filesystem is to be simple to implement while
allowing for a reasonable set of operations:

	- List all files.
	- Create files.
	- Remove files.

Files can be updated in-place.
Files can be resized by creating a new file and deleting the old one.

The filesystem does not support append workloads. The user must
decide during file creation the final size of the file.

The filesystem consists of a super block followed by a series of
contigous objects.

+-------------+
| Super Block |
+-------------+
| Object 1    |
+-------------+
| ...         |
+-------------+
| Object N    |
+-------------+

The super block contains a magic number that acts as both a signataure
and version number. There are offsets to the used and free lists which
are discussed more below.

struct superBlock {
	uint32_t magic;
	uint32_t size;
	uint32_t freeOffset;
	uint32_t usedOffset;
};


Each object consists of a header, some amount of space and a trailer.
They are used to keep track of both used and free space.

+---------+
| Header  |
+---------+
| Space   |
+---------+
| Trailer |
+---------+

All used objects are connected in a doubly linked list.
All free objects are connected in another doubly linked list.

                 Free Space
     .----------.---------------------.
     v          v                     v
+----------+----------+----------+----------+----------+
| Free Obj | Free Obj | Used Obj | Free Obj | Used Obj |
+----------+----------+----------+----------+----------+
                           ^                     ^
                           '---------------------'
                                  Used Space

Each header contains a next and prev offset for the doubly linked list.
The length field denotes how much space the object takes up minus the
size of the header and trailer. The fileName field is for "used"
objects and is the file name.

struct header {
	uint32_t length;
	uint32_t prevOffset;
	uint32_t nextOffset;
	uint32_t fileSize;
	uint8_t fileName[64];
};

Each trailer contains the header offset. This is used to quickly
coalesce free objects with their neighbors.

struct trailer {
	uint32_t headerOffset;
};

When the filesystem is first created, it consists of a super block
followed by a single free object that takes up all available space.
The super block's freeOffset points to the free object.

When a file is created, the free object is removed from the free list
and split into two objects. One object is given enough space to hold
the new file and goes into the used list. The other object goes back
into the free list.

When a file is removed, the used object is removed from the used list.
The neighboring objects, high and low, are checked to see if they are
free. The object being freed is coalesced with it's neighbors if they
are also free objects.

To list all files within the filesystem, traverse the used list and
identify files by the fileName and fileSize field in each object header.

And, that's it! Interestingly, this scheme was chosen both for it's
simplicity and similarity to the standard library's dynamic memory
allocation scheme.
