The CPU archetecture leaves many decisions up to the software.
There are no special assembly instructions for interacting with
a stack or calling and returning from functions.

By doing this, we reduce the complexity of the hardware implemenation.
The trade off is to increase software complexity.

The software decides where the stack resides in memory if at all.
The software decides how to pass arguments to a function.
The software decides how to return to a caller.

There are no hard and fast rules on how any of the above should be
done. However, coming up with reasonable conventions allows straight
forward code reuse and aids in code maintenance. Here lies the
conventions used by the standard library.

All library functions use a double underscore prefix on all internal
labels. User's of this library should not use the double underscore
prefix to avoid label name conflicts.

The sp (stack pointer) is a pseudonym for r15.
The stack grows down, meaning it goes from a high to low address.
There are no push/pop instructions. You must adjust the sp yourself.

There are two ways arguments are passed.
  1. Register
  2. Stack

The first five registers, r0 to r4, when used as function arguments
are not garaunteed to retain the value set by the caller when a
function returns. The callee is allowed to freely modify these
registers without saving and restoring from the stack. This helps
reduce function call overhead and the standard library size.

The caller should always store the return address on the stack
before jumping to the callee. The callee will pop the return
address from the stack before returning. The callee must load
the return address somewhere to be used with jump. At the end
of each function r4 holds the return address.

The caller recieves a return value through r3.

Example:
The strlen function takes a single argument which is the starting
address of a string. The address is passed with r0.

mov r0 .string
sub sp sp 2
stw sp .return
jmp .strlen
.return
; value returned in r3

There are times when the stack must be used. For example, variadic
functions could take more arguments then there are available registers.

Example:
The snprintf function takes 


