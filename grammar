IDENTIFIER CONSTANT STRING

# Expressions only contain identifiers, literals and operators, where
# operators include arithmetic and boolean operators, the function call
# operator () the subscription operator [] and similar, and can be
# reduced to some kind of "value".

# Statements are the highest level and describe what can be on
# each line of code. Expressions are a subset of statements.

########################################################################
# Operators
########################################################################

unary_operator
	: deref_operator
	| '!' | '~';

deref_operator
	: '*';

binary_operator
	: bitwise_operator
	| logical_operator
	| math_operator
	| assignment_operator;

math_operator
	: '+' | '-' | '/' | '*' | '%';

bitwise_operator
	: '|' | '&' | '^';

logical_operator
	: '||' | '&&' | '==' | '!=' | '<' | '>' | '<=' | '>=';

assignment_operator
	: '=';

pointer_operator
	: '.' | '->';

array_operator
	: expr '[' expr ']';

########################################################################
# Expressions
########################################################################

expr
	: expr_function
	| expr_math
	| expr_scope
	| IDENTIFIER
	| LITERAL;

expr_scope
	: '(' expr ')';

expr_math
	: expr binary_operator expr
	| unary_operator expr

parameter
	: expr |
	| expr ',' parameter;

expr_function
	: IDENTIFIER '(' parameter ')';

########################################################################
# Types
########################################################################

type
	: type_base
	| type_pointer
	| type_struct;

type_base
	: 'u8' | 'u32' | 'char';

type_struct
	: 'struct' IDENTIFIER

type_pointer
	: type_base '*'
	| type_struct '*';


########################################################################
# Statements
########################################################################

stmt
	: stmt_block
	| stmt_multi
	| stmt_expr
	| stmt_conditional
	| stmt_loop
	| stmt_flow
	| stmt_define
	| stmt_declare
	| stmt_declare_initialize
	| ';';

stmt_block
	: '{' stmt '}';

stmt_multi
	: stmt stmt;

stmt_expr
	: expr ';'

stmt_conditional
	: 'if' '(' expr ')' stmt
	| 'if' '(' expr ')' stmt 'else' stmt;

stmt_loop
	: 'while' '(' expr ')' stmt
	| 'for' '(' expr ';' expr ';' expr ')' stmt;

stmt_flow
	: 'break' ';'
	| 'continue' ';';

stmt_return
	: 'return' ';'
	| 'return' expr ';'

argument
	: type IDENTIFIER
	| type IDENTIFIER ',' argument;

stmt_define
	: type_struct '{' stmt_declare '}' ';'
	| type IDENTIFIER '(' argument ')' '{' stmt '}';

stmt_declare
	: type IDENTIFIER ';'
	| type IDENTIFIER '[' CONSTANT ']' ';'

stmt_declare_initialize
	: type_primitive IDENTIFIER '=' expr ';';

